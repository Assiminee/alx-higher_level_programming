# 7-base_geometry.txt

=============================
How to use 7-base_geometry.py
=============================

This module contains a single class called "BaseGeometry"
which contains two methods:

A method called "area()" which is not yet implemented
A method called "integer_validator()" which checks if
a given input is of type int

Numbers
=======

::

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
	>>> tst1 = BaseGeometry()
	>>> tst1.integer_validator("Integer", 12)
	>>> tst1.integer_validator("Float", 12.5)
	Traceback (most recent call last):
		...
	TypeError: Float must be an integer

	>>> tst1.integer_validator("Tuple", (12.5, 12, 12.01))
	Traceback (most recent call last):
		...
	TypeError: Tuple must be an integer

        >>> tst1.integer_validator("List", [12.5, 12, 12.01])
        Traceback (most recent call last):
                ...
        TypeError: List must be an integer

	>>> tst1.integer_validator("Dict", {"num1": 12.5, "num2": 12, "num3": 12.01})
        Traceback (most recent call last):
                ...
        TypeError: Dict must be an integer

	>>> tst1.integer_validator("Zero", 0)
	Traceback (most recent call last):
                ...
        ValueError: Zero must be greater than 0

	>>> bg = BaseGeometry()
	>>> bg.integer_validator("my_int", 12)
	>>> bg.integer_validator("width", 89)
	>>> try:
	...     bg.integer_validator("name", "John")
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	... 
	[TypeError] name must be an integer

	>>> try:
	...     bg.integer_validator("age", 0)
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	... 
	[ValueError] age must be greater than 0

	>>> try:
	...     bg.integer_validator("distance", -4)
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	... 
	[ValueError] distance must be greater than 0

